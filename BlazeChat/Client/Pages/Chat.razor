@page "/chat"

@implements IAsyncDisposable
@inject NavigationManager NavManager

<div class="container">
    <div class="card">
        <div class="card-header bg-danger text-white">
            <div class="row">
                <div class="col">
                    <h2>BlazeChat</h2>
                </div>
                <div class="col float-end">
                    <button type="button" class="btn btn-warning float-end">Выйти</button>
                    <label class="float-end me-2 mt-2">Добро пожаловать, @AuthenticationState.Name</label>
                </div>
            </div>
        </div>
        <div class="card-body" messages-window>
            <div class="row">
                <div class="col-3">
                    <UsersListComponent Users="Users" />
                </div>
                <div class="col-9">
                    <ChatMessagesComponent />
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    private HubConnection? hubConnection;

    public ICollection<string> Users { get; set; } = new HashSet<string>();

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        if (!AuthenticationState.IsAuthenticatied)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            hubConnection = new HubConnectionBuilder()
                                .WithUrl(NavManager.ToAbsoluteUri("/hubs/blazechat"))
                                .Build();

            hubConnection.On<string>(nameof(IBlazeChatHubClient.UserConnected), (username) =>
            {
                Users.Add(username);
                StateHasChanged();
            });

            await hubConnection.StartAsync();
            await hubConnection.SendAsync(nameof(IBlazeChatHubServer.ConnectUser), AuthenticationState.Name);

        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}
